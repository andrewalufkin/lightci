Project Structure:
We're using the modern rust syntax which means no mod.rs files, but modules
are named like this: engine.rs, workspace.rs, models.rs, executors.rs, etc.

📁 lightci/
├── 📁 packages/
│   ├── 📁 core/                 # Core pipeline engine (Rust)
│   │   ├── Cargo.toml
│   │   └── src/
│   │       ├── engine.rs         # Pipeline execution engine
│   │       ├── workspace.rs      # Workspace management
│   │       ├── git.rs            # Git integration
│   │       ├── models.rs         # Data models
│   │       ├── executors.rs      # Command execution handlers
│   │       ├── traits.rs         # Traits for the engine
│   │       ├── config.rs         # Configuration handling (YAML files)
│   │       ├── artifact.rs       # Artifact management
│   │       └── lib.rs            # Library entry point
│   ├── 📁 api/                  # API server (Node.js/TypeScript)
│   │   ├── package.json
│   │   ├── src/
│   │   │   ├── routes/           # API route definitions
│   │   │   │   ├── pipelines.ts  # Pipeline endpoints
│   │   │   │   ├── builds.ts     # Build endpoints
│   │   │   │   ├── artifacts.ts  # Artifact endpoints
│   │   │   │   ├── webhooks.ts   # Webhook endpoints
│   │   │   │   └── index.ts      # Route aggregation
│   │   │   ├── controllers/      # Business logic
│   │   │   │   ├── pipeline.controller.ts
│   │   │   │   ├── build.controller.ts
│   │   │   │   ├── artifact.controller.ts
│   │   │   │   └── webhook.controller.ts
│   │   │   ├── services/        # Core service layer
│   │   │   │   ├── engine.service.ts  # Interface with Rust core
│   │   │   │   ├── git.service.ts     # Git operations
│   │   │   │   ├── workspace.service.ts # Workspace management
│   │   │   │   └── artifact.service.ts  # Artifact handling
│   │   │   ├── models/          # Data models & types
│   │   │   │   ├── Pipeline.ts
│   │   │   │   ├── Build.ts
│   │   │   │   ├── Step.ts
│   │   │   │   └── types/
│   │   │   ├── middleware/      # Custom middleware
│   │   │   │   ├── auth.ts      # Authentication
│   │   │   │   ├── validation.ts # Request validation
│   │   │   │   └── error-handler.ts # Error handling
│   │   │   ├── config/         # Configuration
│   │   │   │   ├── database.ts
│   │   │   │   └── engine.ts
│   │   │   ├── utils/          # Utility functions
│   │   │   └── app.ts          # Express application setup
│   │   ├── test/               # Test suite
│   │   │   ├── setup.ts        # Test setup and configuration
│   │   │   ├── fixtures/       # Test data and fixtures
│   │   │   │   ├── pipelines.ts # Pipeline test data
│   │   │   │   ├── builds.ts    # Build test data
│   │   │   │   └── artifacts.ts # Artifact test data
│   │   │   ├── utils/          # Test utilities
│   │   │   │   ├── testDb.ts    # Database test helpers
│   │   │   │   ├── testServer.ts # Express app test instance
│   │   │   │   └── mockServices.ts # Service mocks
│   │   │   └── integration/    # Integration tests
│   │   │       ├── pipelines.test.ts
│   │   │       ├── builds.test.ts
│   │   │       ├── artifacts.test.ts
│   │   │       └── webhooks.test.ts
│   │   └── tsconfig.json
│   │
│   ├── 📁 dashboard/          # Web Interface (React/TypeScript)
│   │   ├── package.json
│   │   ├── src/
│   │   │   ├── components/    # React components
│   │   │   ├── pages/        # Page layouts
│   │   │   └── hooks/        # Custom React hooks
│   │   └── tsconfig.json
│   │
│   └── 📁 cli/               # Command Line Interface (Rust)
│       ├── Cargo.toml
│       └── src/
│           ├── main.rs         # CLI entry point
│           ├── config.rs       # Configuration handling
│           ├── logger.rs       # Logging
│           ├── tracker.rs      # Pipeline tracking
│           ├── tests.rs        # Tests
│           └── commands/     # CLI commands 
│
├── 📁 docs/                  # Documentation
│   ├── architecture/
│   ├── api/
│   └── getting-started.md
│
├── 📁 examples/             # Example pipelines and configurations
│   ├── simple-pipeline/
│   └── advanced-pipeline/
│
├── 📁 scripts/             # Development and build scripts
│   ├── setup.sh
│   └── build.sh
│
├── docker-compose.yml      # Development environment
├── .github/               # GitHub Actions for our own CI
├── Project Structure.txt
├── Progress and goals.txt
└── README.md

Technology Choices:

1. Core Pipeline Engine (Rust):
   - High performance and memory safety
   - Excellent concurrency support
   - Strong system-level programming capabilities
   - Cross-platform compatibility

2. API Server (Node.js/TypeScript):
   - Fast development iteration
   - Large ecosystem for web technologies
   - Good performance for I/O operations
   - Type safety with TypeScript

3. Web Dashboard (React/TypeScript):
   - Modern, responsive UI development
   - Strong component ecosystem
   - Type safety with TypeScript
   - Good developer experience

4. CLI (Rust):
   - Fast startup time
   - Single binary distribution
   - Cross-platform compatibility
   - Shares code with core engine

Build Tools:
- Cargo for Rust packages
- pnpm for Node.js packages (faster than npm)
- Docker for development and deployment
- GitHub Actions for CI/CD