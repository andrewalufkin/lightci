generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pipeline {
  id                    String        @id @default(uuid())
  name                  String
  description           String?
  repository            String
  defaultBranch         String        @map("default_branch")
  steps                 Json          @default("[]")
  triggers              Json?         @default("{}")
  schedule              Json?         @default("{}")
  webhookConfig         Json?         @default("{}") @map("webhook_config")
  status                String        @default("created")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  artifactPatterns      Json?         @default("[]") @map("artifact_patterns")
  artifactRetentionDays Int           @default(30) @map("artifact_retention_days")
  artifactStorageConfig Json?         @default("{}") @map("artifact_storage_config")
  artifactStorageType   String        @default("local") @map("artifact_storage_type")
  artifactsEnabled      Boolean       @default(true) @map("artifacts_enabled")
  deploymentConfig      Json?         @default("{}") @map("deployment_config")
  deploymentEnabled     Boolean       @default(false) @map("deployment_enabled")
  deploymentPlatform    String?       @map("deployment_platform")
  projectId             String?       @map("project_id")
  createdById           String?       @map("created_by")
  runs                  PipelineRun[]
  project               Project?      @relation(fields: [projectId], references: [id])
  createdBy             User?         @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("pipelines")
}

model PipelineRun {
  id                 String    @id @default(uuid())
  pipelineId         String    @map("pipeline_id")
  status             String    @default("pending")
  branch             String
  commit             String?
  startedAt          DateTime  @default(now()) @map("started_at")
  completedAt        DateTime? @map("completed_at")
  stepResults        Json      @default("[]")
  logs               Json      @default("[]")
  error              String?
  artifactsCollected Boolean   @default(false) @map("artifacts_collected")
  artifactsCount     Int?      @map("artifacts_count")
  artifactsExpireAt  DateTime? @map("artifacts_expire_at")
  artifactsPath      String?   @map("artifacts_path")
  artifactsSize      Int?      @map("artifacts_size")
  pipeline           Pipeline  @relation(fields: [pipelineId], references: [id])

  @@map("pipeline_runs")
}

model User {
  id                String                  @id @default(uuid())
  email             String                  @unique
  username          String?                 @unique
  passwordHash      String                  @map("password_hash")
  fullName          String?                 @map("full_name")
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")
  lastLoginAt       DateTime?               @map("last_login_at")
  accountStatus     String                  @default("active") @map("account_status")
  accountTier       String                  @default("free") @map("account_tier")
  apiKeys           ApiKey[]
  createdPipelines  Pipeline[]              @relation("CreatedBy")
  orgMemberships    OrganizationMember[]
  notificationPrefs NotificationPreference?
  repoConnections   RepositoryConnection[]
  ownedProjects     Project[]               @relation("UserProjects")

  @@map("users")
}

model ApiKey {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  keyName    String    @map("key_name")
  keyPrefix  String    @map("key_prefix")
  keyHash    String    @map("key_hash")
  createdAt  DateTime  @default(now()) @map("created_at")
  expiresAt  DateTime? @map("expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  isActive   Boolean   @default(true) @map("is_active")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, keyName])
  @@map("api_keys")
}

model Organization {
  id              String                 @id @default(uuid())
  name            String
  slug            String                 @unique
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")
  planTier        String                 @default("free") @map("plan_tier")
  members         OrganizationMember[]
  projects        Project[]              @relation("OrgProjects")
  repoConnections RepositoryConnection[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  role           String       @default("member")
  joinedAt       DateTime     @default(now()) @map("joined_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String?
  ownerId      String        @map("owner_id")
  ownerType    String        @map("owner_type")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  pipelines    Pipeline[]
  organization Organization? @relation("OrgProjects", fields: [ownerId], references: [id], map: "projects_org_owner_fkey")
  user         User?         @relation("UserProjects", fields: [ownerId], references: [id], map: "projects_user_owner_fkey")

  @@unique([name, ownerId, ownerType])
  @@map("projects")
}

model NotificationPreference {
  userId             String  @id @map("user_id")
  emailBuildSuccess  Boolean @default(false) @map("email_build_success")
  emailBuildFailure  Boolean @default(true) @map("email_build_failure")
  emailDeploySuccess Boolean @default(false) @map("email_deployment_success")
  emailDeployFailure Boolean @default(true) @map("email_deployment_failure")
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model RepositoryConnection {
  id                   String        @id @default(uuid())
  userId               String?       @map("user_id")
  organizationId       String?       @map("organization_id")
  gitProvider          String        @map("git_provider")
  repositoryUrl        String        @map("repository_url")
  accessTokenEncrypted String?       @map("access_token_encrypted")
  webhookId            String?       @map("webhook_id")
  webhookSecret        String?       @map("webhook_secret")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")
  user                 User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization         Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("repository_connections")
}
